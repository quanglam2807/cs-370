functor mlcompLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : mlcomp_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* mlcomp.grm - parser spec 
   The grammar specification provided here comes in part from the description provided
   by Andreas Rossberg at http://www.mpi-sws.org/~rossberg/sml.html. The grammar 
   provided below is not exactly the same since a subset of Standard ML is supported
   by this compiler.
*)

open MLAS;

val idnum = ref 0

fun nextIdNum() = 
  let val x = !idnum
  in
    idnum := !idnum + 1;
    x
  end

exception emptyDecList;
exception argumentMismatch;

fun uncurryIt nil = raise emptyDecList
  | uncurryIt (L as ((name,patList,exp)::t)) = 
    let fun len nil = raise argumentMismatch
          | len [(n,p,e)] = length(p)
          | len ((n,p,e)::t) = 
            let val size = length(p)
            in
              if size = len t then size else 
                (TextIO.output(TextIO.stdOut,"Syntax Error: Number of arguments does not match in function "^name^"\n");
                 raise argumentMismatch)
            end
        
        val tupleList = List.map (fn x => "v"^Int.toString(nextIdNum())) patList
     in
       len(L); (* just check the paramter list sizes so all patterns have same length *)
       (name,[match(idpat(hd(tupleList)),
                 List.foldr (fn (x,y) => func(nextIdNum(),[match(idpat(x), y)])) 
                    (apply (func(nextIdNum(),List.map (fn (n,p,e) => match(tuplepat(p),e)) L),tuplecon(List.map (fn x => id(x)) tupleList))) (tl tupleList))])
      
(*     This version worked before adding support for mutually recursive functions. It converts a curried function to a val rec declaration.  
       bindvalrec(idpat(name),List.foldr (fn (x,y) => func(nextIdNum(),[match(idpat(x), y)])) 
                    (apply (func(nextIdNum(),List.map (fn (n,p,e) => match(tuplepat(p),e)) L),tuplecon(List.map (fn x => id(x)) tupleList))) tupleList)
*) 
     end

fun makeMatchList (nil) = raise emptyDecList
  | makeMatchList (L as (name,pat,exp)::t) =
    (name, List.map (fn (n,p,e) => 
               (if name <> n then (
                   TextIO.output(TextIO.stdOut,"Syntax Error: Function definition with different names "^name^" and "^n^" not allowed.\n");
                   raise argumentMismatch)
                else match(p,e))) L)


      

end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\153\000\000\000\
\\001\000\001\000\154\000\002\000\154\000\003\000\154\000\004\000\154\000\
\\005\000\154\000\006\000\154\000\007\000\154\000\008\000\154\000\
\\009\000\154\000\010\000\154\000\011\000\154\000\012\000\154\000\
\\013\000\154\000\014\000\154\000\015\000\154\000\016\000\154\000\
\\017\000\154\000\020\000\154\000\021\000\154\000\022\000\154\000\
\\023\000\154\000\024\000\154\000\026\000\154\000\027\000\154\000\
\\028\000\154\000\029\000\154\000\030\000\154\000\031\000\154\000\
\\032\000\154\000\033\000\154\000\034\000\154\000\035\000\154\000\
\\036\000\154\000\037\000\154\000\038\000\154\000\039\000\154\000\
\\040\000\154\000\042\000\154\000\043\000\154\000\044\000\154\000\
\\045\000\154\000\046\000\154\000\047\000\154\000\049\000\154\000\
\\050\000\154\000\000\000\
\\001\000\001\000\155\000\002\000\155\000\003\000\155\000\004\000\155\000\
\\005\000\155\000\006\000\155\000\007\000\155\000\008\000\155\000\
\\009\000\155\000\010\000\155\000\011\000\155\000\012\000\155\000\
\\013\000\155\000\014\000\155\000\015\000\155\000\016\000\155\000\
\\017\000\155\000\020\000\155\000\021\000\155\000\022\000\155\000\
\\023\000\155\000\024\000\155\000\026\000\155\000\027\000\155\000\
\\028\000\155\000\029\000\155\000\030\000\155\000\031\000\155\000\
\\032\000\155\000\033\000\155\000\034\000\155\000\035\000\155\000\
\\036\000\155\000\037\000\155\000\038\000\155\000\039\000\155\000\
\\040\000\155\000\042\000\155\000\043\000\155\000\044\000\155\000\
\\045\000\155\000\046\000\155\000\047\000\155\000\048\000\040\000\
\\049\000\155\000\050\000\155\000\000\000\
\\001\000\001\000\156\000\002\000\156\000\003\000\156\000\004\000\036\000\
\\005\000\035\000\006\000\034\000\007\000\033\000\008\000\032\000\
\\009\000\031\000\010\000\030\000\011\000\029\000\012\000\028\000\
\\013\000\027\000\014\000\026\000\015\000\025\000\016\000\156\000\
\\017\000\156\000\020\000\024\000\021\000\156\000\022\000\156\000\
\\023\000\156\000\024\000\156\000\026\000\156\000\027\000\156\000\
\\028\000\156\000\029\000\156\000\030\000\156\000\031\000\156\000\
\\032\000\156\000\033\000\156\000\034\000\156\000\035\000\156\000\
\\036\000\023\000\037\000\156\000\038\000\156\000\039\000\156\000\
\\040\000\156\000\042\000\156\000\043\000\156\000\044\000\156\000\
\\045\000\156\000\046\000\156\000\047\000\156\000\049\000\156\000\
\\050\000\156\000\000\000\
\\001\000\001\000\157\000\002\000\157\000\003\000\157\000\004\000\157\000\
\\005\000\157\000\006\000\157\000\007\000\157\000\008\000\157\000\
\\009\000\157\000\010\000\157\000\011\000\157\000\012\000\157\000\
\\013\000\157\000\014\000\157\000\015\000\157\000\016\000\157\000\
\\017\000\157\000\020\000\157\000\021\000\157\000\022\000\157\000\
\\023\000\157\000\024\000\157\000\026\000\157\000\027\000\157\000\
\\028\000\157\000\029\000\157\000\030\000\157\000\031\000\157\000\
\\032\000\157\000\033\000\157\000\034\000\157\000\035\000\157\000\
\\036\000\023\000\037\000\157\000\038\000\157\000\039\000\157\000\
\\040\000\157\000\042\000\157\000\043\000\157\000\044\000\157\000\
\\045\000\157\000\046\000\157\000\047\000\157\000\049\000\157\000\
\\050\000\157\000\000\000\
\\001\000\001\000\158\000\002\000\158\000\003\000\158\000\004\000\158\000\
\\005\000\158\000\006\000\158\000\007\000\158\000\008\000\158\000\
\\009\000\158\000\010\000\158\000\011\000\158\000\012\000\158\000\
\\013\000\158\000\014\000\158\000\015\000\158\000\016\000\158\000\
\\017\000\158\000\020\000\158\000\021\000\158\000\022\000\158\000\
\\023\000\158\000\024\000\158\000\026\000\158\000\027\000\158\000\
\\028\000\158\000\029\000\158\000\030\000\158\000\031\000\158\000\
\\032\000\158\000\033\000\158\000\034\000\158\000\035\000\158\000\
\\036\000\023\000\037\000\158\000\038\000\158\000\039\000\158\000\
\\040\000\158\000\042\000\158\000\043\000\158\000\044\000\158\000\
\\045\000\158\000\046\000\158\000\047\000\158\000\049\000\158\000\
\\050\000\158\000\000\000\
\\001\000\001\000\159\000\002\000\021\000\003\000\159\000\004\000\159\000\
\\005\000\159\000\006\000\159\000\007\000\159\000\008\000\159\000\
\\009\000\159\000\010\000\159\000\011\000\159\000\012\000\159\000\
\\013\000\159\000\014\000\159\000\015\000\159\000\016\000\159\000\
\\017\000\159\000\020\000\159\000\021\000\159\000\022\000\020\000\
\\023\000\159\000\024\000\159\000\026\000\019\000\027\000\159\000\
\\028\000\159\000\029\000\159\000\030\000\018\000\031\000\159\000\
\\032\000\159\000\033\000\017\000\034\000\016\000\035\000\159\000\
\\036\000\159\000\037\000\015\000\038\000\159\000\039\000\014\000\
\\040\000\159\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\160\000\002\000\021\000\003\000\160\000\004\000\160\000\
\\005\000\160\000\006\000\160\000\007\000\160\000\008\000\160\000\
\\009\000\160\000\010\000\160\000\011\000\160\000\012\000\160\000\
\\013\000\160\000\014\000\160\000\015\000\160\000\016\000\160\000\
\\017\000\160\000\020\000\160\000\021\000\160\000\022\000\020\000\
\\023\000\160\000\024\000\160\000\026\000\019\000\027\000\160\000\
\\028\000\160\000\029\000\160\000\030\000\018\000\031\000\160\000\
\\032\000\160\000\033\000\017\000\034\000\016\000\035\000\160\000\
\\036\000\160\000\037\000\015\000\038\000\160\000\039\000\014\000\
\\040\000\160\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\161\000\002\000\021\000\003\000\161\000\004\000\161\000\
\\005\000\161\000\006\000\161\000\007\000\161\000\008\000\161\000\
\\009\000\161\000\010\000\161\000\011\000\161\000\012\000\161\000\
\\013\000\161\000\014\000\161\000\015\000\161\000\016\000\161\000\
\\017\000\161\000\020\000\161\000\021\000\161\000\022\000\020\000\
\\023\000\161\000\024\000\161\000\026\000\019\000\027\000\161\000\
\\028\000\161\000\029\000\161\000\030\000\018\000\031\000\161\000\
\\032\000\161\000\033\000\017\000\034\000\016\000\035\000\161\000\
\\036\000\161\000\037\000\015\000\038\000\161\000\039\000\014\000\
\\040\000\161\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\162\000\002\000\021\000\003\000\162\000\004\000\162\000\
\\005\000\162\000\006\000\162\000\007\000\162\000\008\000\162\000\
\\009\000\162\000\010\000\162\000\011\000\162\000\012\000\162\000\
\\013\000\162\000\014\000\162\000\015\000\162\000\016\000\162\000\
\\017\000\162\000\020\000\162\000\021\000\162\000\022\000\020\000\
\\023\000\162\000\024\000\162\000\026\000\019\000\027\000\162\000\
\\028\000\162\000\029\000\162\000\030\000\018\000\031\000\162\000\
\\032\000\162\000\033\000\017\000\034\000\016\000\035\000\162\000\
\\036\000\162\000\037\000\015\000\038\000\162\000\039\000\014\000\
\\040\000\162\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\163\000\002\000\021\000\003\000\163\000\004\000\163\000\
\\005\000\163\000\006\000\163\000\007\000\163\000\008\000\163\000\
\\009\000\163\000\010\000\163\000\011\000\163\000\012\000\163\000\
\\013\000\163\000\014\000\163\000\015\000\163\000\016\000\163\000\
\\017\000\163\000\020\000\163\000\021\000\163\000\022\000\020\000\
\\023\000\163\000\024\000\163\000\026\000\019\000\027\000\163\000\
\\028\000\163\000\029\000\163\000\030\000\018\000\031\000\163\000\
\\032\000\163\000\033\000\017\000\034\000\016\000\035\000\163\000\
\\036\000\163\000\037\000\015\000\038\000\163\000\039\000\014\000\
\\040\000\163\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\164\000\002\000\021\000\003\000\164\000\004\000\164\000\
\\005\000\164\000\006\000\164\000\007\000\164\000\008\000\164\000\
\\009\000\164\000\010\000\164\000\011\000\164\000\012\000\164\000\
\\013\000\164\000\014\000\164\000\015\000\164\000\016\000\164\000\
\\017\000\164\000\020\000\164\000\021\000\164\000\022\000\020\000\
\\023\000\164\000\024\000\164\000\026\000\019\000\027\000\164\000\
\\028\000\164\000\029\000\164\000\030\000\018\000\031\000\164\000\
\\032\000\164\000\033\000\017\000\034\000\016\000\035\000\164\000\
\\036\000\164\000\037\000\015\000\038\000\164\000\039\000\014\000\
\\040\000\164\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\165\000\002\000\021\000\003\000\165\000\004\000\165\000\
\\005\000\165\000\006\000\165\000\007\000\165\000\008\000\165\000\
\\009\000\165\000\010\000\165\000\011\000\165\000\012\000\165\000\
\\013\000\165\000\014\000\165\000\015\000\165\000\016\000\165\000\
\\017\000\165\000\020\000\165\000\021\000\165\000\022\000\020\000\
\\023\000\165\000\024\000\165\000\026\000\019\000\027\000\165\000\
\\028\000\165\000\029\000\165\000\030\000\018\000\031\000\165\000\
\\032\000\165\000\033\000\017\000\034\000\016\000\035\000\165\000\
\\036\000\165\000\037\000\015\000\038\000\165\000\039\000\014\000\
\\040\000\165\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\166\000\002\000\021\000\003\000\166\000\004\000\166\000\
\\005\000\166\000\006\000\166\000\007\000\166\000\008\000\166\000\
\\009\000\166\000\010\000\166\000\011\000\166\000\012\000\166\000\
\\013\000\166\000\014\000\166\000\015\000\166\000\016\000\166\000\
\\017\000\166\000\020\000\166\000\021\000\166\000\022\000\020\000\
\\023\000\166\000\024\000\166\000\026\000\019\000\027\000\166\000\
\\028\000\166\000\029\000\166\000\030\000\018\000\031\000\166\000\
\\032\000\166\000\033\000\017\000\034\000\016\000\035\000\166\000\
\\036\000\166\000\037\000\015\000\038\000\166\000\039\000\014\000\
\\040\000\166\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\167\000\002\000\021\000\003\000\167\000\004\000\167\000\
\\005\000\167\000\006\000\167\000\007\000\167\000\008\000\167\000\
\\009\000\167\000\010\000\167\000\011\000\167\000\012\000\167\000\
\\013\000\167\000\014\000\167\000\015\000\167\000\016\000\167\000\
\\017\000\167\000\020\000\167\000\021\000\167\000\022\000\020\000\
\\023\000\167\000\024\000\167\000\026\000\019\000\027\000\167\000\
\\028\000\167\000\029\000\167\000\030\000\018\000\031\000\167\000\
\\032\000\167\000\033\000\017\000\034\000\016\000\035\000\167\000\
\\036\000\167\000\037\000\015\000\038\000\167\000\039\000\014\000\
\\040\000\167\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\168\000\002\000\021\000\003\000\168\000\004\000\168\000\
\\005\000\168\000\006\000\168\000\007\000\168\000\008\000\168\000\
\\009\000\168\000\010\000\168\000\011\000\168\000\012\000\168\000\
\\013\000\168\000\014\000\168\000\015\000\168\000\016\000\168\000\
\\017\000\168\000\020\000\168\000\021\000\168\000\022\000\020\000\
\\023\000\168\000\024\000\168\000\026\000\019\000\027\000\168\000\
\\028\000\168\000\029\000\168\000\030\000\018\000\031\000\168\000\
\\032\000\168\000\033\000\017\000\034\000\016\000\035\000\168\000\
\\036\000\168\000\037\000\015\000\038\000\168\000\039\000\014\000\
\\040\000\168\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\169\000\002\000\021\000\003\000\169\000\004\000\169\000\
\\005\000\169\000\006\000\169\000\007\000\169\000\008\000\169\000\
\\009\000\169\000\010\000\169\000\011\000\169\000\012\000\169\000\
\\013\000\169\000\014\000\169\000\015\000\169\000\016\000\169\000\
\\017\000\169\000\020\000\169\000\021\000\169\000\022\000\020\000\
\\023\000\169\000\024\000\169\000\026\000\019\000\027\000\169\000\
\\028\000\169\000\029\000\169\000\030\000\018\000\031\000\169\000\
\\032\000\169\000\033\000\017\000\034\000\016\000\035\000\169\000\
\\036\000\169\000\037\000\015\000\038\000\169\000\039\000\014\000\
\\040\000\169\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\170\000\002\000\021\000\003\000\170\000\004\000\170\000\
\\005\000\170\000\006\000\170\000\007\000\170\000\008\000\170\000\
\\009\000\170\000\010\000\170\000\011\000\170\000\012\000\170\000\
\\013\000\170\000\014\000\170\000\015\000\170\000\016\000\170\000\
\\017\000\170\000\020\000\170\000\021\000\170\000\022\000\020\000\
\\023\000\170\000\024\000\170\000\026\000\019\000\027\000\170\000\
\\028\000\170\000\029\000\170\000\030\000\018\000\031\000\170\000\
\\032\000\170\000\033\000\017\000\034\000\016\000\035\000\170\000\
\\036\000\170\000\037\000\015\000\038\000\170\000\039\000\014\000\
\\040\000\170\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\171\000\002\000\021\000\003\000\171\000\004\000\171\000\
\\005\000\171\000\006\000\171\000\007\000\171\000\008\000\171\000\
\\009\000\171\000\010\000\171\000\011\000\171\000\012\000\171\000\
\\013\000\171\000\014\000\171\000\015\000\171\000\016\000\171\000\
\\017\000\171\000\020\000\171\000\021\000\171\000\022\000\020\000\
\\023\000\171\000\024\000\171\000\026\000\019\000\027\000\171\000\
\\028\000\171\000\029\000\171\000\030\000\018\000\031\000\171\000\
\\032\000\171\000\033\000\017\000\034\000\016\000\035\000\171\000\
\\036\000\171\000\037\000\015\000\038\000\171\000\039\000\014\000\
\\040\000\171\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\172\000\002\000\021\000\003\000\172\000\004\000\172\000\
\\005\000\172\000\006\000\172\000\007\000\172\000\008\000\172\000\
\\009\000\172\000\010\000\172\000\011\000\172\000\012\000\172\000\
\\013\000\172\000\014\000\172\000\015\000\172\000\016\000\172\000\
\\017\000\172\000\020\000\172\000\021\000\172\000\022\000\020\000\
\\023\000\172\000\024\000\172\000\026\000\019\000\027\000\172\000\
\\028\000\172\000\029\000\172\000\030\000\018\000\031\000\172\000\
\\032\000\172\000\033\000\017\000\034\000\016\000\035\000\172\000\
\\036\000\172\000\037\000\015\000\038\000\172\000\039\000\014\000\
\\040\000\172\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\173\000\002\000\173\000\003\000\173\000\004\000\173\000\
\\005\000\173\000\006\000\173\000\007\000\173\000\008\000\173\000\
\\009\000\173\000\010\000\173\000\011\000\173\000\012\000\173\000\
\\013\000\173\000\014\000\173\000\015\000\173\000\016\000\173\000\
\\017\000\173\000\020\000\173\000\021\000\173\000\022\000\173\000\
\\023\000\173\000\024\000\173\000\026\000\173\000\027\000\173\000\
\\028\000\173\000\029\000\173\000\030\000\173\000\031\000\173\000\
\\032\000\173\000\033\000\173\000\034\000\173\000\035\000\173\000\
\\036\000\173\000\037\000\173\000\038\000\173\000\039\000\173\000\
\\040\000\173\000\042\000\173\000\043\000\173\000\044\000\173\000\
\\045\000\173\000\046\000\173\000\047\000\173\000\049\000\173\000\
\\050\000\173\000\000\000\
\\001\000\001\000\174\000\002\000\174\000\003\000\174\000\004\000\174\000\
\\005\000\174\000\006\000\174\000\007\000\174\000\008\000\174\000\
\\009\000\174\000\010\000\174\000\011\000\174\000\012\000\174\000\
\\013\000\174\000\014\000\174\000\015\000\174\000\016\000\174\000\
\\017\000\174\000\020\000\174\000\021\000\174\000\022\000\174\000\
\\023\000\174\000\024\000\174\000\026\000\174\000\027\000\174\000\
\\028\000\174\000\029\000\174\000\030\000\174\000\031\000\174\000\
\\032\000\174\000\033\000\174\000\034\000\174\000\035\000\174\000\
\\036\000\174\000\037\000\174\000\038\000\174\000\039\000\174\000\
\\040\000\174\000\042\000\174\000\043\000\174\000\044\000\174\000\
\\045\000\174\000\046\000\174\000\047\000\174\000\049\000\174\000\
\\050\000\174\000\000\000\
\\001\000\001\000\175\000\002\000\175\000\003\000\175\000\004\000\175\000\
\\005\000\175\000\006\000\175\000\007\000\175\000\008\000\175\000\
\\009\000\175\000\010\000\175\000\011\000\175\000\012\000\175\000\
\\013\000\175\000\014\000\175\000\015\000\175\000\016\000\175\000\
\\017\000\175\000\020\000\175\000\021\000\175\000\022\000\175\000\
\\023\000\175\000\024\000\175\000\026\000\175\000\027\000\175\000\
\\028\000\175\000\029\000\175\000\030\000\175\000\031\000\175\000\
\\032\000\175\000\033\000\175\000\034\000\175\000\035\000\175\000\
\\036\000\175\000\037\000\175\000\038\000\175\000\039\000\175\000\
\\040\000\175\000\042\000\175\000\043\000\175\000\044\000\175\000\
\\045\000\175\000\046\000\175\000\047\000\175\000\049\000\175\000\
\\050\000\175\000\000\000\
\\001\000\001\000\176\000\002\000\176\000\003\000\176\000\004\000\176\000\
\\005\000\176\000\006\000\176\000\007\000\176\000\008\000\176\000\
\\009\000\176\000\010\000\176\000\011\000\176\000\012\000\176\000\
\\013\000\176\000\014\000\176\000\015\000\176\000\016\000\176\000\
\\017\000\176\000\020\000\176\000\021\000\176\000\022\000\176\000\
\\023\000\176\000\024\000\176\000\026\000\176\000\027\000\176\000\
\\028\000\176\000\029\000\176\000\030\000\176\000\031\000\176\000\
\\032\000\176\000\033\000\176\000\034\000\176\000\035\000\176\000\
\\036\000\176\000\037\000\176\000\038\000\176\000\039\000\176\000\
\\040\000\176\000\042\000\176\000\043\000\176\000\044\000\176\000\
\\045\000\176\000\046\000\176\000\047\000\176\000\049\000\176\000\
\\050\000\176\000\000\000\
\\001\000\001\000\177\000\002\000\177\000\003\000\177\000\004\000\177\000\
\\005\000\177\000\006\000\177\000\007\000\177\000\008\000\177\000\
\\009\000\177\000\010\000\177\000\011\000\177\000\012\000\177\000\
\\013\000\177\000\014\000\177\000\015\000\177\000\016\000\177\000\
\\017\000\177\000\020\000\177\000\021\000\177\000\022\000\177\000\
\\023\000\177\000\024\000\177\000\026\000\177\000\027\000\177\000\
\\028\000\177\000\029\000\177\000\030\000\177\000\031\000\177\000\
\\032\000\177\000\033\000\177\000\034\000\177\000\035\000\177\000\
\\036\000\177\000\037\000\177\000\038\000\177\000\039\000\177\000\
\\040\000\177\000\042\000\177\000\043\000\177\000\044\000\177\000\
\\045\000\177\000\046\000\177\000\047\000\177\000\049\000\177\000\
\\050\000\177\000\000\000\
\\001\000\001\000\178\000\002\000\178\000\003\000\178\000\004\000\178\000\
\\005\000\178\000\006\000\178\000\007\000\178\000\008\000\178\000\
\\009\000\178\000\010\000\178\000\011\000\178\000\012\000\178\000\
\\013\000\178\000\014\000\178\000\015\000\178\000\016\000\178\000\
\\017\000\178\000\020\000\178\000\021\000\178\000\022\000\178\000\
\\023\000\178\000\024\000\178\000\026\000\178\000\027\000\178\000\
\\028\000\178\000\029\000\178\000\030\000\178\000\031\000\178\000\
\\032\000\178\000\033\000\178\000\034\000\178\000\035\000\178\000\
\\036\000\178\000\037\000\178\000\038\000\178\000\039\000\178\000\
\\040\000\178\000\042\000\178\000\043\000\178\000\044\000\178\000\
\\045\000\178\000\046\000\178\000\047\000\178\000\049\000\178\000\
\\050\000\178\000\000\000\
\\001\000\001\000\179\000\002\000\179\000\003\000\179\000\004\000\179\000\
\\005\000\179\000\006\000\179\000\007\000\179\000\008\000\179\000\
\\009\000\179\000\010\000\179\000\011\000\179\000\012\000\179\000\
\\013\000\179\000\014\000\179\000\015\000\179\000\016\000\179\000\
\\017\000\179\000\020\000\179\000\021\000\179\000\022\000\179\000\
\\023\000\179\000\024\000\179\000\026\000\179\000\027\000\179\000\
\\028\000\179\000\029\000\179\000\030\000\179\000\031\000\179\000\
\\032\000\179\000\033\000\179\000\034\000\179\000\035\000\179\000\
\\036\000\179\000\037\000\179\000\038\000\179\000\039\000\179\000\
\\040\000\179\000\042\000\179\000\043\000\179\000\044\000\179\000\
\\045\000\179\000\046\000\179\000\047\000\179\000\049\000\179\000\
\\050\000\179\000\000\000\
\\001\000\001\000\180\000\002\000\021\000\003\000\180\000\004\000\180\000\
\\005\000\180\000\006\000\180\000\007\000\180\000\008\000\180\000\
\\009\000\180\000\010\000\180\000\011\000\180\000\012\000\180\000\
\\013\000\180\000\014\000\180\000\015\000\180\000\016\000\180\000\
\\017\000\180\000\020\000\180\000\021\000\180\000\022\000\020\000\
\\023\000\180\000\024\000\180\000\026\000\019\000\027\000\180\000\
\\028\000\180\000\029\000\180\000\030\000\018\000\031\000\180\000\
\\032\000\180\000\033\000\017\000\034\000\016\000\035\000\180\000\
\\036\000\180\000\037\000\015\000\038\000\180\000\039\000\014\000\
\\040\000\180\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\181\000\002\000\181\000\003\000\181\000\004\000\181\000\
\\005\000\181\000\006\000\181\000\007\000\181\000\008\000\181\000\
\\009\000\181\000\010\000\181\000\011\000\181\000\012\000\181\000\
\\013\000\181\000\014\000\181\000\015\000\181\000\016\000\181\000\
\\017\000\181\000\020\000\181\000\021\000\181\000\022\000\181\000\
\\023\000\181\000\024\000\181\000\026\000\181\000\027\000\181\000\
\\028\000\181\000\029\000\181\000\030\000\181\000\031\000\181\000\
\\032\000\181\000\033\000\181\000\034\000\181\000\035\000\181\000\
\\036\000\181\000\037\000\181\000\038\000\181\000\039\000\181\000\
\\040\000\181\000\042\000\181\000\043\000\181\000\044\000\181\000\
\\045\000\181\000\046\000\181\000\047\000\181\000\049\000\181\000\
\\050\000\181\000\000\000\
\\001\000\001\000\182\000\002\000\182\000\003\000\182\000\004\000\182\000\
\\005\000\182\000\006\000\182\000\007\000\182\000\008\000\182\000\
\\009\000\182\000\010\000\182\000\011\000\182\000\012\000\182\000\
\\013\000\182\000\014\000\182\000\015\000\182\000\016\000\182\000\
\\017\000\182\000\020\000\182\000\021\000\182\000\022\000\182\000\
\\023\000\182\000\024\000\182\000\026\000\182\000\027\000\182\000\
\\028\000\182\000\029\000\182\000\030\000\182\000\031\000\182\000\
\\032\000\182\000\033\000\182\000\034\000\182\000\035\000\182\000\
\\036\000\182\000\037\000\182\000\038\000\182\000\039\000\182\000\
\\040\000\182\000\042\000\182\000\043\000\182\000\044\000\182\000\
\\045\000\182\000\046\000\182\000\047\000\182\000\049\000\182\000\
\\050\000\182\000\000\000\
\\001\000\001\000\183\000\002\000\021\000\003\000\183\000\004\000\183\000\
\\005\000\183\000\006\000\183\000\007\000\183\000\008\000\183\000\
\\009\000\183\000\010\000\183\000\011\000\183\000\012\000\183\000\
\\013\000\183\000\014\000\183\000\015\000\183\000\016\000\183\000\
\\017\000\183\000\020\000\183\000\021\000\183\000\022\000\020\000\
\\023\000\183\000\024\000\183\000\026\000\019\000\027\000\183\000\
\\028\000\183\000\029\000\183\000\030\000\018\000\031\000\183\000\
\\032\000\183\000\033\000\017\000\034\000\016\000\035\000\183\000\
\\036\000\183\000\037\000\015\000\038\000\183\000\039\000\014\000\
\\040\000\183\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\184\000\002\000\021\000\003\000\184\000\004\000\184\000\
\\005\000\184\000\006\000\184\000\007\000\184\000\008\000\184\000\
\\009\000\184\000\010\000\184\000\011\000\184\000\012\000\184\000\
\\013\000\184\000\014\000\184\000\015\000\184\000\016\000\184\000\
\\017\000\184\000\020\000\184\000\021\000\184\000\022\000\020\000\
\\023\000\184\000\024\000\184\000\026\000\019\000\027\000\184\000\
\\028\000\184\000\029\000\184\000\030\000\018\000\031\000\184\000\
\\032\000\184\000\033\000\017\000\034\000\016\000\035\000\184\000\
\\036\000\184\000\037\000\015\000\038\000\184\000\039\000\014\000\
\\040\000\184\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\001\000\185\000\002\000\185\000\003\000\185\000\004\000\185\000\
\\005\000\185\000\006\000\185\000\007\000\185\000\008\000\185\000\
\\009\000\185\000\010\000\185\000\011\000\185\000\012\000\185\000\
\\013\000\185\000\014\000\185\000\015\000\185\000\016\000\185\000\
\\017\000\185\000\020\000\185\000\021\000\185\000\022\000\185\000\
\\023\000\185\000\024\000\185\000\026\000\185\000\027\000\185\000\
\\028\000\185\000\029\000\185\000\030\000\185\000\031\000\185\000\
\\032\000\185\000\033\000\185\000\034\000\185\000\035\000\185\000\
\\036\000\185\000\037\000\185\000\038\000\185\000\039\000\185\000\
\\040\000\185\000\042\000\185\000\043\000\185\000\044\000\185\000\
\\045\000\185\000\046\000\185\000\047\000\185\000\049\000\185\000\
\\050\000\185\000\000\000\
\\001\000\001\000\186\000\002\000\186\000\003\000\186\000\004\000\036\000\
\\005\000\035\000\006\000\034\000\007\000\033\000\008\000\032\000\
\\009\000\031\000\010\000\030\000\011\000\029\000\012\000\028\000\
\\013\000\027\000\014\000\026\000\015\000\025\000\016\000\186\000\
\\017\000\186\000\020\000\024\000\021\000\186\000\022\000\186\000\
\\023\000\186\000\024\000\186\000\026\000\186\000\027\000\186\000\
\\028\000\186\000\029\000\186\000\030\000\186\000\031\000\186\000\
\\032\000\186\000\033\000\186\000\034\000\186\000\035\000\186\000\
\\036\000\023\000\037\000\186\000\038\000\186\000\039\000\186\000\
\\040\000\186\000\042\000\186\000\043\000\186\000\044\000\186\000\
\\045\000\186\000\046\000\186\000\047\000\186\000\049\000\186\000\
\\050\000\186\000\000\000\
\\001\000\001\000\191\000\002\000\186\000\003\000\191\000\004\000\036\000\
\\005\000\035\000\006\000\034\000\007\000\033\000\008\000\032\000\
\\009\000\031\000\010\000\030\000\011\000\029\000\012\000\028\000\
\\013\000\027\000\014\000\026\000\015\000\025\000\016\000\191\000\
\\017\000\191\000\020\000\024\000\021\000\129\000\022\000\186\000\
\\023\000\191\000\024\000\191\000\026\000\186\000\027\000\191\000\
\\028\000\191\000\029\000\191\000\030\000\186\000\031\000\191\000\
\\032\000\191\000\033\000\186\000\034\000\186\000\035\000\191\000\
\\036\000\023\000\037\000\186\000\038\000\191\000\039\000\186\000\
\\040\000\191\000\042\000\186\000\043\000\186\000\044\000\186\000\
\\045\000\186\000\046\000\186\000\047\000\186\000\049\000\186\000\
\\050\000\186\000\000\000\
\\001\000\001\000\192\000\002\000\192\000\003\000\192\000\004\000\192\000\
\\005\000\192\000\006\000\192\000\007\000\192\000\008\000\192\000\
\\009\000\192\000\010\000\192\000\011\000\192\000\012\000\192\000\
\\013\000\192\000\014\000\192\000\015\000\192\000\016\000\192\000\
\\017\000\192\000\020\000\192\000\021\000\192\000\022\000\192\000\
\\023\000\192\000\024\000\192\000\026\000\192\000\027\000\192\000\
\\028\000\192\000\029\000\192\000\030\000\192\000\031\000\192\000\
\\032\000\192\000\033\000\192\000\034\000\192\000\035\000\192\000\
\\036\000\192\000\037\000\192\000\038\000\192\000\039\000\192\000\
\\040\000\192\000\042\000\192\000\043\000\192\000\044\000\192\000\
\\045\000\192\000\046\000\192\000\047\000\192\000\049\000\192\000\
\\050\000\192\000\000\000\
\\001\000\001\000\224\000\002\000\224\000\003\000\224\000\004\000\224\000\
\\005\000\224\000\006\000\224\000\007\000\224\000\008\000\224\000\
\\009\000\224\000\010\000\224\000\011\000\224\000\012\000\224\000\
\\013\000\224\000\014\000\224\000\015\000\224\000\016\000\224\000\
\\017\000\224\000\020\000\224\000\021\000\224\000\022\000\224\000\
\\023\000\224\000\024\000\224\000\026\000\224\000\027\000\224\000\
\\028\000\224\000\029\000\224\000\030\000\224\000\031\000\224\000\
\\032\000\224\000\033\000\224\000\034\000\224\000\035\000\224\000\
\\036\000\224\000\037\000\224\000\038\000\224\000\039\000\224\000\
\\040\000\224\000\042\000\224\000\043\000\224\000\044\000\224\000\
\\045\000\224\000\046\000\224\000\047\000\224\000\049\000\224\000\
\\050\000\224\000\000\000\
\\001\000\001\000\225\000\002\000\225\000\003\000\225\000\004\000\225\000\
\\005\000\225\000\006\000\225\000\007\000\225\000\008\000\225\000\
\\009\000\225\000\010\000\225\000\011\000\225\000\012\000\225\000\
\\013\000\225\000\014\000\225\000\015\000\225\000\016\000\225\000\
\\017\000\225\000\020\000\225\000\021\000\225\000\022\000\225\000\
\\023\000\225\000\024\000\225\000\026\000\225\000\027\000\225\000\
\\028\000\225\000\029\000\225\000\030\000\225\000\031\000\225\000\
\\032\000\225\000\033\000\225\000\034\000\225\000\035\000\225\000\
\\036\000\225\000\037\000\225\000\038\000\225\000\039\000\225\000\
\\040\000\225\000\042\000\225\000\043\000\225\000\044\000\225\000\
\\045\000\225\000\046\000\225\000\047\000\225\000\049\000\225\000\
\\050\000\225\000\000\000\
\\001\000\001\000\226\000\002\000\226\000\003\000\226\000\004\000\226\000\
\\005\000\226\000\006\000\226\000\007\000\226\000\008\000\226\000\
\\009\000\226\000\010\000\226\000\011\000\226\000\012\000\226\000\
\\013\000\226\000\014\000\226\000\015\000\226\000\016\000\226\000\
\\017\000\226\000\020\000\226\000\021\000\226\000\022\000\226\000\
\\023\000\226\000\024\000\226\000\026\000\226\000\027\000\226\000\
\\028\000\226\000\029\000\226\000\030\000\226\000\031\000\226\000\
\\032\000\226\000\033\000\226\000\034\000\226\000\035\000\226\000\
\\036\000\226\000\037\000\226\000\038\000\226\000\039\000\226\000\
\\040\000\226\000\042\000\226\000\043\000\226\000\044\000\226\000\
\\045\000\226\000\046\000\226\000\047\000\226\000\049\000\226\000\
\\050\000\226\000\000\000\
\\001\000\001\000\227\000\002\000\227\000\003\000\227\000\004\000\227\000\
\\005\000\227\000\006\000\227\000\007\000\227\000\008\000\227\000\
\\009\000\227\000\010\000\227\000\011\000\227\000\012\000\227\000\
\\013\000\227\000\014\000\227\000\015\000\227\000\016\000\227\000\
\\017\000\227\000\020\000\227\000\021\000\227\000\022\000\227\000\
\\023\000\227\000\024\000\227\000\026\000\227\000\027\000\227\000\
\\028\000\227\000\029\000\227\000\030\000\227\000\031\000\227\000\
\\032\000\227\000\033\000\227\000\034\000\227\000\035\000\227\000\
\\036\000\227\000\037\000\227\000\038\000\227\000\039\000\227\000\
\\040\000\227\000\042\000\227\000\043\000\227\000\044\000\227\000\
\\045\000\227\000\046\000\227\000\047\000\227\000\049\000\227\000\
\\050\000\227\000\000\000\
\\001\000\001\000\228\000\002\000\228\000\003\000\228\000\004\000\228\000\
\\005\000\228\000\006\000\228\000\007\000\228\000\008\000\228\000\
\\009\000\228\000\010\000\228\000\011\000\228\000\012\000\228\000\
\\013\000\228\000\014\000\228\000\015\000\228\000\016\000\228\000\
\\017\000\228\000\020\000\228\000\021\000\228\000\022\000\228\000\
\\023\000\228\000\024\000\228\000\026\000\228\000\027\000\228\000\
\\028\000\228\000\029\000\228\000\030\000\228\000\031\000\228\000\
\\032\000\228\000\033\000\228\000\034\000\228\000\035\000\228\000\
\\036\000\228\000\037\000\228\000\038\000\228\000\039\000\228\000\
\\040\000\228\000\042\000\228\000\043\000\228\000\044\000\228\000\
\\045\000\228\000\046\000\228\000\047\000\228\000\049\000\228\000\
\\050\000\228\000\000\000\
\\001\000\001\000\037\000\002\000\186\000\004\000\036\000\005\000\035\000\
\\006\000\034\000\007\000\033\000\008\000\032\000\009\000\031\000\
\\010\000\030\000\011\000\029\000\012\000\028\000\013\000\027\000\
\\014\000\026\000\015\000\025\000\020\000\024\000\022\000\186\000\
\\026\000\186\000\030\000\186\000\033\000\186\000\034\000\186\000\
\\036\000\023\000\037\000\186\000\039\000\186\000\042\000\186\000\
\\043\000\186\000\044\000\186\000\045\000\186\000\046\000\186\000\
\\047\000\186\000\049\000\186\000\050\000\186\000\000\000\
\\001\000\002\000\186\000\003\000\187\000\004\000\036\000\005\000\035\000\
\\006\000\034\000\007\000\033\000\008\000\032\000\009\000\031\000\
\\010\000\030\000\011\000\029\000\012\000\028\000\013\000\027\000\
\\014\000\026\000\015\000\025\000\016\000\105\000\020\000\024\000\
\\022\000\186\000\023\000\187\000\026\000\186\000\030\000\186\000\
\\033\000\186\000\034\000\186\000\036\000\023\000\037\000\186\000\
\\039\000\186\000\042\000\186\000\043\000\186\000\044\000\186\000\
\\045\000\186\000\046\000\186\000\047\000\186\000\049\000\186\000\
\\050\000\186\000\000\000\
\\001\000\002\000\186\000\003\000\189\000\004\000\036\000\005\000\035\000\
\\006\000\034\000\007\000\033\000\008\000\032\000\009\000\031\000\
\\010\000\030\000\011\000\029\000\012\000\028\000\013\000\027\000\
\\014\000\026\000\015\000\025\000\017\000\108\000\020\000\024\000\
\\022\000\186\000\026\000\186\000\029\000\189\000\030\000\186\000\
\\033\000\186\000\034\000\186\000\036\000\023\000\037\000\186\000\
\\039\000\186\000\042\000\186\000\043\000\186\000\044\000\186\000\
\\045\000\186\000\046\000\186\000\047\000\186\000\049\000\186\000\
\\050\000\186\000\000\000\
\\001\000\002\000\186\000\003\000\109\000\004\000\036\000\005\000\035\000\
\\006\000\034\000\007\000\033\000\008\000\032\000\009\000\031\000\
\\010\000\030\000\011\000\029\000\012\000\028\000\013\000\027\000\
\\014\000\026\000\015\000\025\000\016\000\105\000\017\000\108\000\
\\020\000\024\000\022\000\186\000\026\000\186\000\030\000\186\000\
\\033\000\186\000\034\000\186\000\036\000\023\000\037\000\186\000\
\\039\000\186\000\042\000\186\000\043\000\186\000\044\000\186\000\
\\045\000\186\000\046\000\186\000\047\000\186\000\049\000\186\000\
\\050\000\186\000\000\000\
\\001\000\002\000\186\000\004\000\036\000\005\000\035\000\006\000\034\000\
\\007\000\033\000\008\000\032\000\009\000\031\000\010\000\030\000\
\\011\000\029\000\012\000\028\000\013\000\027\000\014\000\026\000\
\\015\000\025\000\020\000\024\000\021\000\145\000\022\000\186\000\
\\024\000\222\000\026\000\186\000\027\000\222\000\028\000\222\000\
\\030\000\186\000\033\000\186\000\034\000\186\000\036\000\023\000\
\\037\000\186\000\039\000\186\000\040\000\222\000\042\000\186\000\
\\043\000\186\000\044\000\186\000\045\000\186\000\046\000\186\000\
\\047\000\186\000\049\000\186\000\050\000\186\000\000\000\
\\001\000\002\000\186\000\004\000\036\000\005\000\035\000\006\000\034\000\
\\007\000\033\000\008\000\032\000\009\000\031\000\010\000\030\000\
\\011\000\029\000\012\000\028\000\013\000\027\000\014\000\026\000\
\\015\000\025\000\020\000\024\000\021\000\146\000\022\000\186\000\
\\024\000\220\000\026\000\186\000\027\000\220\000\028\000\220\000\
\\030\000\186\000\033\000\186\000\034\000\186\000\036\000\023\000\
\\037\000\186\000\039\000\186\000\040\000\220\000\042\000\186\000\
\\043\000\186\000\044\000\186\000\045\000\186\000\046\000\186\000\
\\047\000\186\000\049\000\186\000\050\000\186\000\000\000\
\\001\000\002\000\186\000\004\000\036\000\005\000\035\000\006\000\034\000\
\\007\000\033\000\008\000\032\000\009\000\031\000\010\000\030\000\
\\011\000\029\000\012\000\028\000\013\000\027\000\014\000\026\000\
\\015\000\025\000\020\000\024\000\022\000\186\000\024\000\215\000\
\\026\000\186\000\027\000\215\000\028\000\215\000\030\000\186\000\
\\033\000\186\000\034\000\186\000\036\000\023\000\037\000\186\000\
\\039\000\186\000\042\000\186\000\043\000\186\000\044\000\186\000\
\\045\000\186\000\046\000\186\000\047\000\186\000\049\000\186\000\
\\050\000\186\000\000\000\
\\001\000\002\000\186\000\004\000\036\000\005\000\035\000\006\000\034\000\
\\007\000\033\000\008\000\032\000\009\000\031\000\010\000\030\000\
\\011\000\029\000\012\000\028\000\013\000\027\000\014\000\026\000\
\\015\000\025\000\020\000\024\000\022\000\186\000\024\000\216\000\
\\026\000\186\000\027\000\216\000\028\000\216\000\030\000\186\000\
\\033\000\186\000\034\000\186\000\036\000\023\000\037\000\186\000\
\\039\000\186\000\042\000\186\000\043\000\186\000\044\000\186\000\
\\045\000\186\000\046\000\186\000\047\000\186\000\049\000\186\000\
\\050\000\186\000\000\000\
\\001\000\002\000\186\000\004\000\036\000\005\000\035\000\006\000\034\000\
\\007\000\033\000\008\000\032\000\009\000\031\000\010\000\030\000\
\\011\000\029\000\012\000\028\000\013\000\027\000\014\000\026\000\
\\015\000\025\000\020\000\024\000\022\000\186\000\026\000\186\000\
\\030\000\186\000\031\000\094\000\033\000\186\000\034\000\186\000\
\\036\000\023\000\037\000\186\000\039\000\186\000\042\000\186\000\
\\043\000\186\000\044\000\186\000\045\000\186\000\046\000\186\000\
\\047\000\186\000\049\000\186\000\050\000\186\000\000\000\
\\001\000\002\000\186\000\004\000\036\000\005\000\035\000\006\000\034\000\
\\007\000\033\000\008\000\032\000\009\000\031\000\010\000\030\000\
\\011\000\029\000\012\000\028\000\013\000\027\000\014\000\026\000\
\\015\000\025\000\020\000\024\000\022\000\186\000\026\000\186\000\
\\030\000\186\000\032\000\131\000\033\000\186\000\034\000\186\000\
\\036\000\023\000\037\000\186\000\039\000\186\000\042\000\186\000\
\\043\000\186\000\044\000\186\000\045\000\186\000\046\000\186\000\
\\047\000\186\000\049\000\186\000\050\000\186\000\000\000\
\\001\000\002\000\186\000\004\000\036\000\005\000\035\000\006\000\034\000\
\\007\000\033\000\008\000\032\000\009\000\031\000\010\000\030\000\
\\011\000\029\000\012\000\028\000\013\000\027\000\014\000\026\000\
\\015\000\025\000\020\000\024\000\022\000\186\000\026\000\186\000\
\\030\000\186\000\033\000\186\000\034\000\186\000\035\000\084\000\
\\036\000\023\000\037\000\186\000\039\000\186\000\042\000\186\000\
\\043\000\186\000\044\000\186\000\045\000\186\000\046\000\186\000\
\\047\000\186\000\049\000\186\000\050\000\186\000\000\000\
\\001\000\002\000\186\000\004\000\036\000\005\000\035\000\006\000\034\000\
\\007\000\033\000\008\000\032\000\009\000\031\000\010\000\030\000\
\\011\000\029\000\012\000\028\000\013\000\027\000\014\000\026\000\
\\015\000\025\000\020\000\024\000\022\000\186\000\026\000\186\000\
\\030\000\186\000\033\000\186\000\034\000\186\000\036\000\023\000\
\\037\000\186\000\038\000\083\000\039\000\186\000\042\000\186\000\
\\043\000\186\000\044\000\186\000\045\000\186\000\046\000\186\000\
\\047\000\186\000\049\000\186\000\050\000\186\000\000\000\
\\001\000\002\000\193\000\003\000\193\000\015\000\193\000\016\000\193\000\
\\018\000\193\000\019\000\193\000\020\000\193\000\022\000\193\000\
\\023\000\193\000\042\000\193\000\043\000\193\000\044\000\193\000\
\\045\000\193\000\046\000\193\000\047\000\193\000\000\000\
\\001\000\002\000\194\000\003\000\194\000\015\000\194\000\016\000\194\000\
\\018\000\194\000\019\000\194\000\020\000\194\000\022\000\194\000\
\\023\000\194\000\042\000\194\000\043\000\194\000\044\000\194\000\
\\045\000\194\000\046\000\194\000\047\000\194\000\000\000\
\\001\000\002\000\195\000\003\000\195\000\015\000\195\000\016\000\195\000\
\\018\000\195\000\019\000\195\000\020\000\195\000\022\000\195\000\
\\023\000\195\000\042\000\195\000\043\000\195\000\044\000\195\000\
\\045\000\195\000\046\000\195\000\047\000\195\000\000\000\
\\001\000\002\000\196\000\003\000\196\000\015\000\196\000\016\000\196\000\
\\018\000\196\000\019\000\196\000\020\000\196\000\022\000\196\000\
\\023\000\196\000\042\000\196\000\043\000\196\000\044\000\196\000\
\\045\000\196\000\046\000\196\000\047\000\196\000\000\000\
\\001\000\002\000\197\000\003\000\197\000\015\000\197\000\016\000\197\000\
\\018\000\197\000\019\000\197\000\020\000\197\000\022\000\197\000\
\\023\000\197\000\042\000\197\000\043\000\197\000\044\000\197\000\
\\045\000\197\000\046\000\197\000\047\000\197\000\000\000\
\\001\000\002\000\198\000\003\000\198\000\015\000\198\000\016\000\198\000\
\\018\000\198\000\019\000\198\000\020\000\198\000\022\000\198\000\
\\023\000\198\000\042\000\198\000\043\000\198\000\044\000\198\000\
\\045\000\198\000\046\000\198\000\047\000\198\000\000\000\
\\001\000\002\000\199\000\003\000\199\000\015\000\199\000\016\000\199\000\
\\018\000\199\000\019\000\199\000\020\000\199\000\022\000\199\000\
\\023\000\199\000\025\000\087\000\042\000\199\000\043\000\199\000\
\\044\000\199\000\045\000\199\000\046\000\199\000\047\000\199\000\000\000\
\\001\000\002\000\200\000\003\000\200\000\015\000\086\000\016\000\200\000\
\\018\000\200\000\019\000\200\000\020\000\200\000\022\000\200\000\
\\023\000\200\000\042\000\200\000\043\000\200\000\044\000\200\000\
\\045\000\200\000\046\000\200\000\047\000\200\000\000\000\
\\001\000\002\000\201\000\003\000\201\000\015\000\201\000\016\000\201\000\
\\018\000\201\000\019\000\201\000\020\000\201\000\022\000\201\000\
\\023\000\201\000\042\000\201\000\043\000\201\000\044\000\201\000\
\\045\000\201\000\046\000\201\000\047\000\201\000\000\000\
\\001\000\002\000\202\000\003\000\202\000\015\000\202\000\016\000\202\000\
\\018\000\202\000\019\000\202\000\020\000\202\000\022\000\202\000\
\\023\000\202\000\042\000\202\000\043\000\202\000\044\000\202\000\
\\045\000\202\000\046\000\202\000\047\000\202\000\000\000\
\\001\000\002\000\203\000\003\000\203\000\015\000\203\000\016\000\203\000\
\\018\000\203\000\019\000\203\000\020\000\203\000\022\000\203\000\
\\023\000\203\000\042\000\203\000\043\000\203\000\044\000\203\000\
\\045\000\203\000\046\000\203\000\047\000\203\000\000\000\
\\001\000\002\000\204\000\003\000\204\000\015\000\204\000\016\000\204\000\
\\018\000\204\000\019\000\204\000\020\000\204\000\022\000\204\000\
\\023\000\204\000\042\000\204\000\043\000\204\000\044\000\204\000\
\\045\000\204\000\046\000\204\000\047\000\204\000\000\000\
\\001\000\002\000\205\000\003\000\205\000\015\000\205\000\016\000\205\000\
\\018\000\205\000\019\000\205\000\020\000\205\000\022\000\205\000\
\\023\000\205\000\042\000\205\000\043\000\205\000\044\000\205\000\
\\045\000\205\000\046\000\205\000\047\000\205\000\000\000\
\\001\000\002\000\206\000\003\000\206\000\015\000\086\000\016\000\206\000\
\\018\000\206\000\019\000\206\000\020\000\206\000\022\000\206\000\
\\023\000\206\000\042\000\206\000\043\000\206\000\044\000\206\000\
\\045\000\206\000\046\000\206\000\047\000\206\000\000\000\
\\001\000\002\000\021\000\003\000\067\000\022\000\020\000\026\000\019\000\
\\030\000\018\000\033\000\017\000\034\000\016\000\037\000\015\000\
\\039\000\014\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\002\000\021\000\022\000\020\000\023\000\063\000\026\000\019\000\
\\030\000\018\000\033\000\017\000\034\000\016\000\037\000\015\000\
\\039\000\014\000\042\000\013\000\043\000\012\000\044\000\011\000\
\\045\000\010\000\046\000\009\000\047\000\008\000\049\000\007\000\
\\050\000\006\000\000\000\
\\001\000\002\000\021\000\022\000\020\000\026\000\019\000\030\000\018\000\
\\033\000\017\000\034\000\016\000\037\000\015\000\039\000\014\000\
\\042\000\013\000\043\000\012\000\044\000\011\000\045\000\010\000\
\\046\000\009\000\047\000\008\000\049\000\007\000\050\000\006\000\000\000\
\\001\000\002\000\055\000\003\000\093\000\018\000\054\000\022\000\053\000\
\\042\000\052\000\043\000\051\000\044\000\050\000\045\000\049\000\
\\046\000\048\000\047\000\047\000\000\000\
\\001\000\002\000\055\000\015\000\086\000\018\000\054\000\020\000\209\000\
\\022\000\053\000\042\000\052\000\043\000\051\000\044\000\050\000\
\\045\000\049\000\046\000\048\000\047\000\047\000\000\000\
\\001\000\002\000\055\000\015\000\086\000\018\000\054\000\020\000\139\000\
\\022\000\053\000\042\000\052\000\043\000\051\000\044\000\050\000\
\\045\000\049\000\046\000\048\000\047\000\047\000\000\000\
\\001\000\002\000\055\000\018\000\054\000\022\000\053\000\023\000\090\000\
\\042\000\052\000\043\000\051\000\044\000\050\000\045\000\049\000\
\\046\000\048\000\047\000\047\000\000\000\
\\001\000\002\000\055\000\018\000\054\000\022\000\053\000\041\000\099\000\
\\042\000\052\000\043\000\051\000\044\000\050\000\045\000\049\000\
\\046\000\048\000\047\000\047\000\000\000\
\\001\000\002\000\055\000\018\000\054\000\022\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\000\000\
\\001\000\003\000\188\000\023\000\188\000\000\000\
\\001\000\003\000\190\000\029\000\190\000\000\000\
\\001\000\003\000\207\000\015\000\086\000\016\000\116\000\023\000\207\000\000\000\
\\001\000\003\000\208\000\023\000\208\000\000\000\
\\001\000\003\000\106\000\000\000\
\\001\000\003\000\107\000\000\000\
\\001\000\003\000\117\000\000\000\
\\001\000\003\000\118\000\015\000\086\000\016\000\116\000\000\000\
\\001\000\015\000\086\000\019\000\085\000\000\000\
\\001\000\015\000\086\000\020\000\122\000\000\000\
\\001\000\015\000\086\000\020\000\139\000\000\000\
\\001\000\020\000\210\000\000\000\
\\001\000\020\000\134\000\000\000\
\\001\000\020\000\136\000\000\000\
\\001\000\023\000\104\000\000\000\
\\001\000\023\000\115\000\000\000\
\\001\000\024\000\211\000\027\000\211\000\028\000\211\000\000\000\
\\001\000\024\000\212\000\027\000\212\000\028\000\212\000\040\000\124\000\000\000\
\\001\000\024\000\217\000\027\000\217\000\028\000\217\000\040\000\217\000\000\000\
\\001\000\024\000\218\000\027\000\218\000\028\000\218\000\040\000\218\000\000\000\
\\001\000\024\000\219\000\027\000\219\000\028\000\219\000\040\000\124\000\000\000\
\\001\000\024\000\221\000\027\000\221\000\028\000\221\000\040\000\221\000\000\000\
\\001\000\024\000\223\000\027\000\223\000\028\000\223\000\040\000\223\000\000\000\
\\001\000\024\000\060\000\027\000\059\000\000\000\
\\001\000\024\000\060\000\027\000\059\000\028\000\213\000\000\000\
\\001\000\028\000\214\000\000\000\
\\001\000\028\000\095\000\000\000\
\\001\000\029\000\132\000\000\000\
\\001\000\047\000\103\000\000\000\
\\001\000\047\000\123\000\000\000\
\\001\000\047\000\148\000\000\000\
\\001\000\047\000\150\000\000\000\
\"
val actionRowNumbers =
"\070\000\070\000\002\000\042\000\
\\070\000\070\000\003\000\041\000\
\\040\000\037\000\038\000\039\000\
\\070\000\070\000\070\000\076\000\
\\070\000\100\000\069\000\068\000\
\\004\000\076\000\070\000\070\000\
\\070\000\070\000\070\000\070\000\
\\070\000\070\000\070\000\070\000\
\\070\000\070\000\070\000\001\000\
\\006\000\005\000\070\000\028\000\
\\034\000\053\000\052\000\085\000\
\\033\000\060\000\058\000\057\000\
\\054\000\055\000\056\000\074\000\
\\059\000\071\000\050\000\103\000\
\\101\000\075\000\105\000\091\000\
\\043\000\026\000\081\000\082\000\
\\045\000\021\000\029\000\017\000\
\\020\000\019\000\018\000\016\000\
\\014\000\015\000\013\000\012\000\
\\011\000\010\000\009\000\008\000\
\\007\000\076\000\070\000\070\000\
\\076\000\076\000\092\000\079\000\
\\066\000\083\000\084\000\062\000\
\\070\000\070\000\102\000\093\000\
\\086\000\106\000\096\000\095\000\
\\094\000\076\000\025\000\070\000\
\\024\000\023\000\070\000\022\000\
\\030\000\032\000\035\000\061\000\
\\067\000\065\000\076\000\064\000\
\\063\000\051\000\104\000\044\000\
\\070\000\089\000\105\000\090\000\
\\073\000\077\000\078\000\076\000\
\\080\000\070\000\027\000\048\000\
\\070\000\097\000\070\000\088\000\
\\072\000\070\000\036\000\031\000\
\\049\000\046\000\047\000\107\000\
\\108\000\099\000\076\000\098\000\
\\076\000\087\000\000\000"
val gotoT =
"\
\\001\000\150\000\002\000\003\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\000\000\
\\002\000\036\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\037\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\040\000\013\000\002\000\014\000\039\000\000\000\
\\002\000\041\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\042\000\013\000\002\000\014\000\001\000\000\000\
\\005\000\044\000\006\000\043\000\000\000\
\\002\000\054\000\013\000\002\000\014\000\001\000\000\000\
\\009\000\056\000\015\000\055\000\000\000\
\\002\000\060\000\003\000\059\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\064\000\003\000\063\000\004\000\062\000\013\000\002\000\
\\014\000\001\000\000\000\
\\000\000\
\\005\000\066\000\006\000\043\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\067\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\068\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\069\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\070\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\071\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\072\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\073\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\074\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\075\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\076\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\077\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\078\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\079\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\040\000\013\000\002\000\014\000\080\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\087\000\007\000\086\000\000\000\
\\000\000\
\\006\000\090\000\007\000\089\000\000\000\
\\000\000\
\\000\000\
\\009\000\056\000\015\000\094\000\000\000\
\\006\000\096\000\010\000\095\000\000\000\
\\011\000\100\000\012\000\099\000\016\000\098\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\005\000\108\000\006\000\043\000\000\000\
\\002\000\040\000\013\000\002\000\014\000\109\000\000\000\
\\002\000\110\000\013\000\002\000\014\000\001\000\000\000\
\\006\000\111\000\000\000\
\\006\000\112\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\117\000\013\000\002\000\014\000\001\000\000\000\
\\002\000\119\000\004\000\118\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\124\000\008\000\123\000\000\000\
\\000\000\
\\002\000\060\000\003\000\125\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\000\000\
\\002\000\119\000\004\000\126\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\087\000\007\000\128\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\131\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\011\000\133\000\012\000\099\000\016\000\098\000\000\000\
\\000\000\
\\006\000\136\000\008\000\135\000\000\000\
\\000\000\
\\000\000\
\\005\000\138\000\006\000\043\000\000\000\
\\000\000\
\\002\000\040\000\013\000\002\000\014\000\139\000\000\000\
\\000\000\
\\000\000\
\\002\000\140\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\002\000\141\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\006\000\136\000\008\000\135\000\000\000\
\\002\000\142\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\002\000\020\000\013\000\002\000\014\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\016\000\145\000\000\000\
\\012\000\147\000\000\000\
\\000\000\
\\006\000\136\000\008\000\123\000\000\000\
\\000\000\
\\006\000\149\000\000\000\
\\000\000\
\\000\000\
\"
val numstates = 151
val numrules = 77
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit | Id of  (string)
 | Int of  (string) | Char of  (string) | String of  (string)
 | CurriedFun of  ( ( string * pat list * exp )  list)
 | DecSeq of  (dec list) | FuncExp of  (exp) | Con of  (exp)
 | FunMatch of  ( ( string * pat * exp )  list)
 | FunBind of  ( ( string * match list )  list) | ValBind of  (dec)
 | Dec of  (dec) | PatternSeq of  (pat list) | Patterns of  (pat list)
 | Pat of  (pat) | MatchExp of  (match list)
 | ExpSequence of  (exp list) | Expressions of  (exp list)
 | Exp of  (exp) | Prog of  (exp)
end
type svalue = MlyValue.svalue
type result = exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "LParen"
  | (T 2) => "RParen"
  | (T 3) => "Plus"
  | (T 4) => "Minus"
  | (T 5) => "Times"
  | (T 6) => "Div"
  | (T 7) => "Mod"
  | (T 8) => "Greater"
  | (T 9) => "Less"
  | (T 10) => "GreaterEqual"
  | (T 11) => "LessEqual"
  | (T 12) => "NotEqual"
  | (T 13) => "Append"
  | (T 14) => "ListCons"
  | (T 15) => "Comma"
  | (T 16) => "Semicolon"
  | (T 17) => "Underscore"
  | (T 18) => "Arrow"
  | (T 19) => "Equals"
  | (T 20) => "VerticalBar"
  | (T 21) => "LBracket"
  | (T 22) => "RBracket"
  | (T 23) => "Fun"
  | (T 24) => "As"
  | (T 25) => "Let"
  | (T 26) => "Val"
  | (T 27) => "In"
  | (T 28) => "End"
  | (T 29) => "If"
  | (T 30) => "Then"
  | (T 31) => "Else"
  | (T 32) => "Fn"
  | (T 33) => "While"
  | (T 34) => "Do"
  | (T 35) => "Handle"
  | (T 36) => "Case"
  | (T 37) => "Of"
  | (T 38) => "Raise"
  | (T 39) => "And"
  | (T 40) => "Rec"
  | (T 41) => "String"
  | (T 42) => "Char"
  | (T 43) => "Int"
  | (T 44) => "True"
  | (T 45) => "False"
  | (T 46) => "Id"
  | (T 47) => "SetEqual"
  | (T 48) => "Exclaim"
  | (T 49) => "Tilde"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 49) $$ (T 48) $$ (T 47) $$ (T 45) $$ (T 44) $$ (T 40) $$ (T 39)
 $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32)
 $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25)
 $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18)
 $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11)
 $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ 
(T 3) $$ (T 2) $$ (T 1) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( _, _, EOF1right)) :: ( _, ( MlyValue.Exp Exp, 
Exp1left, _)) :: rest671)) => let val  result = MlyValue.Prog (Exp)
 in ( LrTable.NT 0, ( result, Exp1left, EOF1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.Con Con, Con1left, Con1right)) :: rest671))
 => let val  result = MlyValue.Exp (Con)
 in ( LrTable.NT 1, ( result, Con1left, Con1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.Id Id, Id1left, Id1right)) :: rest671)) =>
 let val  result = MlyValue.Exp (id(Id))
 in ( LrTable.NT 1, ( result, Id1left, Id1right), rest671)
end
|  ( 3, ( ( _, ( MlyValue.Exp Exp, _, Exp1right)) :: ( _, ( 
MlyValue.FuncExp FuncExp, FuncExp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (apply(FuncExp,Exp))
 in ( LrTable.NT 1, ( result, FuncExp1left, Exp1right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.Exp Exp, _, Exp1right)) :: ( _, ( _, 
Exclaim1left, _)) :: rest671)) => let val  result = MlyValue.Exp (
apply(id("!"),Exp))
 in ( LrTable.NT 1, ( result, Exclaim1left, Exp1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.Exp Exp, _, Exp1right)) :: ( _, ( _, 
Tilde1left, _)) :: rest671)) => let val  result = MlyValue.Exp (
negate(Exp))
 in ( LrTable.NT 1, ( result, Tilde1left, Exp1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ :: 
( _, ( MlyValue.Id Id, Id1left, _)) :: rest671)) => let val  result = 
MlyValue.Exp (infixexp(":=",id(Id),FuncExp))
 in ( LrTable.NT 1, ( result, Id1left, FuncExp1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ :: 
( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  result
 = MlyValue.Exp (infixexp("+",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 8, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ :: 
( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  result
 = MlyValue.Exp (infixexp("-",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ :: 
( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  result
 = MlyValue.Exp (infixexp("*",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (infixexp("div",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (infixexp("mod",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (infixexp(">",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (infixexp(">=",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (infixexp("<",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 15, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (infixexp("<=",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (infixexp("=",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (infixexp("<>",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (infixexp("@",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 19, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (infixexp("::",Exp,FuncExp))
 in ( LrTable.NT 1, ( result, Exp1left, FuncExp1right), rest671)
end
|  ( 20, ( ( _, ( _, _, RParen1right)) :: ( _, ( _, LParen1left, _))
 :: rest671)) => let val  result = MlyValue.Exp (tuplecon([]))
 in ( LrTable.NT 1, ( result, LParen1left, RParen1right), rest671)
end
|  ( 21, ( ( _, ( _, _, RParen1right)) :: ( _, ( MlyValue.Exp Exp, _,
 _)) :: ( _, ( _, LParen1left, _)) :: rest671)) => let val  result = 
MlyValue.Exp (Exp)
 in ( LrTable.NT 1, ( result, LParen1left, RParen1right), rest671)
end
|  ( 22, ( ( _, ( _, _, RParen1right)) :: ( _, ( MlyValue.Expressions 
Expressions, _, _)) :: ( _, ( _, LParen1left, _)) :: rest671)) => let
 val  result = MlyValue.Exp (tuplecon(Expressions))
 in ( LrTable.NT 1, ( result, LParen1left, RParen1right), rest671)
end
|  ( 23, ( ( _, ( _, _, RParen1right)) :: ( _, ( MlyValue.ExpSequence 
ExpSequence, _, _)) :: ( _, ( _, LParen1left, _)) :: rest671)) => let
 val  result = MlyValue.Exp (expsequence(ExpSequence))
 in ( LrTable.NT 1, ( result, LParen1left, RParen1right), rest671)
end
|  ( 24, ( ( _, ( _, _, RBracket1right)) :: ( _, ( 
MlyValue.Expressions Expressions, _, _)) :: ( _, ( _, LBracket1left, _
)) :: rest671)) => let val  result = MlyValue.Exp (
listcon(Expressions))
 in ( LrTable.NT 1, ( result, LBracket1left, RBracket1right), rest671)

end
|  ( 25, ( ( _, ( _, _, RBracket1right)) :: ( _, ( _, LBracket1left, _
)) :: rest671)) => let val  result = MlyValue.Exp (id("nil"))
 in ( LrTable.NT 1, ( result, LBracket1left, RBracket1right), rest671)

end
|  ( 26, ( ( _, ( _, _, End1right)) :: ( _, ( MlyValue.ExpSequence 
ExpSequence, _, _)) :: _ :: ( _, ( MlyValue.DecSeq DecSeq, _, _)) :: (
 _, ( _, Let1left, _)) :: rest671)) => let val  result = MlyValue.Exp
 (List.hd (List.foldr (fn (x,y) => [letdec(x,y)]) ExpSequence DecSeq))
 in ( LrTable.NT 1, ( result, Let1left, End1right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: ( _,
 ( _, Raise1left, _)) :: rest671)) => let val  result = MlyValue.Exp (
raisexp(FuncExp))
 in ( LrTable.NT 1, ( result, Raise1left, FuncExp1right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.MatchExp MatchExp, _, MatchExp1right)) :: _
 :: ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.Exp (handlexp(Exp,MatchExp))
 in ( LrTable.NT 1, ( result, Exp1left, MatchExp1right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.MatchExp MatchExp, _, MatchExp1right)) :: _
 :: ( _, ( MlyValue.Exp Exp, _, _)) :: ( _, ( _, Case1left, _)) :: 
rest671)) => let val  result = MlyValue.Exp (caseof(Exp,MatchExp))
 in ( LrTable.NT 1, ( result, Case1left, MatchExp1right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp2, _, _)) :: _ :: ( _, ( MlyValue.Exp Exp1, _,
 _)) :: ( _, ( _, If1left, _)) :: rest671)) => let val  result = 
MlyValue.Exp (ifthen(Exp1,Exp2,FuncExp))
 in ( LrTable.NT 1, ( result, If1left, FuncExp1right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.FuncExp FuncExp, _, FuncExp1right)) :: _ ::
 ( _, ( MlyValue.Exp Exp, _, _)) :: ( _, ( _, While1left, _)) :: 
rest671)) => let val  result = MlyValue.Exp (whiledo(Exp,FuncExp))
 in ( LrTable.NT 1, ( result, While1left, FuncExp1right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.MatchExp MatchExp, _, MatchExp1right)) :: (
 _, ( _, Fn1left, _)) :: rest671)) => let val  result = MlyValue.Exp (
func(nextIdNum(),MatchExp))
 in ( LrTable.NT 1, ( result, Fn1left, MatchExp1right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.Exp Exp, Exp1left, Exp1right)) :: rest671))
 => let val  result = MlyValue.FuncExp (Exp)
 in ( LrTable.NT 13, ( result, Exp1left, Exp1right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.Exp Exp, Exp1left, Exp1right)) :: rest671))
 => let val  result = MlyValue.Expressions ([Exp])
 in ( LrTable.NT 2, ( result, Exp1left, Exp1right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.Expressions Expressions, _, 
Expressions1right)) :: _ :: ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: 
rest671)) => let val  result = MlyValue.Expressions (Exp::Expressions)
 in ( LrTable.NT 2, ( result, Exp1left, Expressions1right), rest671)

end
|  ( 36, ( ( _, ( MlyValue.Exp Exp, Exp1left, Exp1right)) :: rest671))
 => let val  result = MlyValue.ExpSequence ([Exp])
 in ( LrTable.NT 3, ( result, Exp1left, Exp1right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.ExpSequence ExpSequence, _, 
ExpSequence1right)) :: _ :: ( _, ( MlyValue.Exp Exp, Exp1left, _)) :: 
rest671)) => let val  result = MlyValue.ExpSequence (Exp::ExpSequence)
 in ( LrTable.NT 3, ( result, Exp1left, ExpSequence1right), rest671)

end
|  ( 38, ( ( _, ( MlyValue.Exp Exp, _, Exp1right)) :: _ :: ( _, ( 
MlyValue.Pat Pat, Pat1left, _)) :: rest671)) => let val  result = 
MlyValue.MatchExp ([match(Pat,Exp)])
 in ( LrTable.NT 4, ( result, Pat1left, Exp1right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.MatchExp MatchExp, _, MatchExp1right)) :: _
 :: ( _, ( MlyValue.Exp Exp, _, _)) :: _ :: ( _, ( MlyValue.Pat Pat, 
Pat1left, _)) :: rest671)) => let val  result = MlyValue.MatchExp (
match(Pat,Exp)::MatchExp)
 in ( LrTable.NT 4, ( result, Pat1left, MatchExp1right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.Int Int, Int1left, Int1right)) :: rest671))
 => let val  result = MlyValue.Pat (intpat(Int))
 in ( LrTable.NT 5, ( result, Int1left, Int1right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.Char Char, Char1left, Char1right)) :: 
rest671)) => let val  result = MlyValue.Pat (chpat(Char))
 in ( LrTable.NT 5, ( result, Char1left, Char1right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.String String, String1left, String1right))
 :: rest671)) => let val  result = MlyValue.Pat (strpat(String))
 in ( LrTable.NT 5, ( result, String1left, String1right), rest671)
end
|  ( 43, ( ( _, ( _, True1left, True1right)) :: rest671)) => let val  
result = MlyValue.Pat (boolpat("true"))
 in ( LrTable.NT 5, ( result, True1left, True1right), rest671)
end
|  ( 44, ( ( _, ( _, False1left, False1right)) :: rest671)) => let
 val  result = MlyValue.Pat (boolpat("false"))
 in ( LrTable.NT 5, ( result, False1left, False1right), rest671)
end
|  ( 45, ( ( _, ( _, Underscore1left, Underscore1right)) :: rest671))
 => let val  result = MlyValue.Pat (wildcardpat)
 in ( LrTable.NT 5, ( result, Underscore1left, Underscore1right), 
rest671)
end
|  ( 46, ( ( _, ( MlyValue.Id Id, Id1left, Id1right)) :: rest671)) =>
 let val  result = MlyValue.Pat (idpat(Id))
 in ( LrTable.NT 5, ( result, Id1left, Id1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.Pat Pat2, _, Pat2right)) :: _ :: ( _, ( 
MlyValue.Pat Pat1, Pat1left, _)) :: rest671)) => let val  result = 
MlyValue.Pat (infixpat("::",Pat1,Pat2))
 in ( LrTable.NT 5, ( result, Pat1left, Pat2right), rest671)
end
|  ( 48, ( ( _, ( _, _, RParen1right)) :: ( _, ( _, LParen1left, _))
 :: rest671)) => let val  result = MlyValue.Pat (tuplepat([]))
 in ( LrTable.NT 5, ( result, LParen1left, RParen1right), rest671)
end
|  ( 49, ( ( _, ( _, _, RParen1right)) :: ( _, ( MlyValue.Pat Pat, _,
 _)) :: ( _, ( _, LParen1left, _)) :: rest671)) => let val  result = 
MlyValue.Pat (Pat)
 in ( LrTable.NT 5, ( result, LParen1left, RParen1right), rest671)
end
|  ( 50, ( ( _, ( _, _, RParen1right)) :: ( _, ( MlyValue.Patterns 
Patterns, _, _)) :: ( _, ( _, LParen1left, _)) :: rest671)) => let
 val  result = MlyValue.Pat (tuplepat(Patterns))
 in ( LrTable.NT 5, ( result, LParen1left, RParen1right), rest671)
end
|  ( 51, ( ( _, ( _, _, RBracket1right)) :: ( _, ( MlyValue.Patterns 
Patterns, _, _)) :: ( _, ( _, LBracket1left, _)) :: rest671)) => let
 val  result = MlyValue.Pat (listpat(Patterns))
 in ( LrTable.NT 5, ( result, LBracket1left, RBracket1right), rest671)

end
|  ( 52, ( ( _, ( _, _, RBracket1right)) :: ( _, ( _, LBracket1left, _
)) :: rest671)) => let val  result = MlyValue.Pat (idpat("nil"))
 in ( LrTable.NT 5, ( result, LBracket1left, RBracket1right), rest671)

end
|  ( 53, ( ( _, ( MlyValue.Pat Pat, _, Pat1right)) :: _ :: ( _, ( 
MlyValue.Id Id, Id1left, _)) :: rest671)) => let val  result = 
MlyValue.Pat (aspat(Id,Pat))
 in ( LrTable.NT 5, ( result, Id1left, Pat1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.Pat Pat, Pat1left, Pat1right)) :: rest671))
 => let val  result = MlyValue.Patterns ([Pat])
 in ( LrTable.NT 6, ( result, Pat1left, Pat1right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.Patterns Patterns, _, Patterns1right)) :: _
 :: ( _, ( MlyValue.Pat Pat, Pat1left, _)) :: rest671)) => let val  
result = MlyValue.Patterns (Pat::Patterns)
 in ( LrTable.NT 6, ( result, Pat1left, Patterns1right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.Pat Pat, Pat1left, Pat1right)) :: rest671))
 => let val  result = MlyValue.PatternSeq ([Pat])
 in ( LrTable.NT 7, ( result, Pat1left, Pat1right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.PatternSeq PatternSeq, _, PatternSeq1right)
) :: ( _, ( MlyValue.Pat Pat, Pat1left, _)) :: rest671)) => let val  
result = MlyValue.PatternSeq (Pat::PatternSeq)
 in ( LrTable.NT 7, ( result, Pat1left, PatternSeq1right), rest671)

end
|  ( 58, ( ( _, ( MlyValue.ValBind ValBind, _, ValBind1right)) :: ( _,
 ( _, Val1left, _)) :: rest671)) => let val  result = MlyValue.Dec (
ValBind)
 in ( LrTable.NT 8, ( result, Val1left, ValBind1right), rest671)
end
|  ( 59, ( ( _, ( MlyValue.FunBind FunBind, _, FunBind1right)) :: ( _,
 ( _, Fun1left, _)) :: rest671)) => let val  result = MlyValue.Dec (
funmatches(FunBind))
 in ( LrTable.NT 8, ( result, Fun1left, FunBind1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.Dec Dec, Dec1left, Dec1right)) :: rest671))
 => let val  result = MlyValue.DecSeq ([Dec])
 in ( LrTable.NT 14, ( result, Dec1left, Dec1right), rest671)
end
|  ( 61, ( ( _, ( MlyValue.DecSeq DecSeq, _, DecSeq1right)) :: ( _, ( 
MlyValue.Dec Dec, Dec1left, _)) :: rest671)) => let val  result = 
MlyValue.DecSeq (Dec::DecSeq)
 in ( LrTable.NT 14, ( result, Dec1left, DecSeq1right), rest671)
end
|  ( 62, ( ( _, ( MlyValue.Exp Exp, _, Exp1right)) :: _ :: ( _, ( 
MlyValue.Pat Pat, Pat1left, _)) :: rest671)) => let val  result = 
MlyValue.ValBind (bindval(Pat,Exp))
 in ( LrTable.NT 9, ( result, Pat1left, Exp1right), rest671)
end
|  ( 63, ( ( _, ( MlyValue.Exp Exp, _, Exp1right)) :: _ :: ( _, ( 
MlyValue.Id Id, _, _)) :: ( _, ( _, Rec1left, _)) :: rest671)) => let
 val  result = MlyValue.ValBind (bindvalrec(idpat(Id),Exp))
 in ( LrTable.NT 9, ( result, Rec1left, Exp1right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.FunMatch FunMatch, FunMatch1left, 
FunMatch1right)) :: rest671)) => let val  result = MlyValue.FunBind (
[makeMatchList FunMatch])
 in ( LrTable.NT 10, ( result, FunMatch1left, FunMatch1right), rest671
)
end
|  ( 65, ( ( _, ( MlyValue.CurriedFun CurriedFun, CurriedFun1left, 
CurriedFun1right)) :: rest671)) => let val  result = MlyValue.FunBind
 ([uncurryIt CurriedFun])
 in ( LrTable.NT 10, ( result, CurriedFun1left, CurriedFun1right), 
rest671)
end
|  ( 66, ( ( _, ( MlyValue.FunBind FunBind2, _, FunBind2right)) :: _
 :: ( _, ( MlyValue.FunBind FunBind1, FunBind1left, _)) :: rest671))
 => let val  result = MlyValue.FunBind (FunBind1@FunBind2)
 in ( LrTable.NT 10, ( result, FunBind1left, FunBind2right), rest671)

end
|  ( 67, ( ( _, ( MlyValue.Exp Exp, _, Exp1right)) :: _ :: ( _, ( 
MlyValue.Pat Pat, _, _)) :: ( _, ( MlyValue.Id Id, Id1left, _)) :: 
rest671)) => let val  result = MlyValue.FunMatch ([(Id,Pat,Exp)])
 in ( LrTable.NT 11, ( result, Id1left, Exp1right), rest671)
end
|  ( 68, ( ( _, ( MlyValue.FunMatch FunMatch, _, FunMatch1right)) :: _
 :: ( _, ( MlyValue.Exp Exp, _, _)) :: _ :: ( _, ( MlyValue.Pat Pat, _
, _)) :: ( _, ( MlyValue.Id Id, Id1left, _)) :: rest671)) => let val  
result = MlyValue.FunMatch ((Id,Pat,Exp)::FunMatch)
 in ( LrTable.NT 11, ( result, Id1left, FunMatch1right), rest671)
end
|  ( 69, ( ( _, ( MlyValue.Exp Exp, _, Exp1right)) :: _ :: ( _, ( 
MlyValue.PatternSeq PatternSeq, _, _)) :: ( _, ( MlyValue.Id Id, 
Id1left, _)) :: rest671)) => let val  result = MlyValue.CurriedFun (
[(Id,PatternSeq,Exp)])
 in ( LrTable.NT 15, ( result, Id1left, Exp1right), rest671)
end
|  ( 70, ( ( _, ( MlyValue.CurriedFun CurriedFun, _, CurriedFun1right)
) :: _ :: ( _, ( MlyValue.Exp Exp, _, _)) :: _ :: ( _, ( 
MlyValue.PatternSeq PatternSeq, _, _)) :: ( _, ( MlyValue.Id Id, 
Id1left, _)) :: rest671)) => let val  result = MlyValue.CurriedFun (
(Id,PatternSeq,Exp)::CurriedFun)
 in ( LrTable.NT 15, ( result, Id1left, CurriedFun1right), rest671)

end
|  ( 71, ( ( _, ( MlyValue.Int Int, Int1left, Int1right)) :: rest671))
 => let val  result = MlyValue.Con (int(Int))
 in ( LrTable.NT 12, ( result, Int1left, Int1right), rest671)
end
|  ( 72, ( ( _, ( MlyValue.Char Char, Char1left, Char1right)) :: 
rest671)) => let val  result = MlyValue.Con (ch(Char))
 in ( LrTable.NT 12, ( result, Char1left, Char1right), rest671)
end
|  ( 73, ( ( _, ( MlyValue.String String, String1left, String1right))
 :: rest671)) => let val  result = MlyValue.Con (str(String))
 in ( LrTable.NT 12, ( result, String1left, String1right), rest671)

end
|  ( 74, ( ( _, ( _, True1left, True1right)) :: rest671)) => let val  
result = MlyValue.Con (boolval("true"))
 in ( LrTable.NT 12, ( result, True1left, True1right), rest671)
end
|  ( 75, ( ( _, ( _, False1left, False1right)) :: rest671)) => let
 val  result = MlyValue.Con (boolval("false"))
 in ( LrTable.NT 12, ( result, False1left, False1right), rest671)
end
|  ( 76, ( ( _, ( _, _, RParen1right)) :: ( _, ( _, LParen1left, _))
 :: rest671)) => let val  result = MlyValue.Con (tuplecon([]))
 in ( LrTable.NT 12, ( result, LParen1left, RParen1right), rest671)

end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.Prog x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a 
end
end
structure Tokens : mlcomp_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun LParen (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun RParen (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun Plus (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun Minus (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun Times (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun Div (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun Mod (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun Greater (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun Less (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun GreaterEqual (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LessEqual (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun NotEqual (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun Append (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun ListCons (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun Comma (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun Semicolon (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun Underscore (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun Arrow (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun Equals (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun VerticalBar (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LBracket (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun RBracket (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun Fun (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun As (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun Let (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun Val (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun In (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun End (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun If (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun Then (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun Else (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun Fn (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun While (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun Do (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun Handle (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun Case (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun Of (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun Raise (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun And (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun Rec (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun String (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.String i,p1,p2))
fun Char (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.Char i,p1,p2))
fun Int (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.Int i,p1,p2))
fun True (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun False (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun Id (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.Id i,p1,p2))
fun SetEqual (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun Exclaim (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun Tilde (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
end
end
