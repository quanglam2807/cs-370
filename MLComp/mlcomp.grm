(* mlcomp.grm - parser spec 
   The grammar specification provided here comes in part from the description provided
   by Andreas Rossberg at http://www.mpi-sws.org/~rossberg/sml.html. The grammar 
   provided below is not exactly the same since a subset of Standard ML is supported
   by this compiler.
*)

open MLAS;

val idnum = ref 0

fun nextIdNum() = 
  let val x = !idnum
  in
    idnum := !idnum + 1;
    x
  end

exception emptyDecList;
exception argumentMismatch;

fun uncurryIt nil = raise emptyDecList
  | uncurryIt (L as ((name,patList,exp)::t)) = 
    let fun len nil = raise argumentMismatch
          | len [(n,p,e)] = length(p)
          | len ((n,p,e)::t) = 
            let val size = length(p)
            in
              if size = len t then size else 
                (TextIO.output(TextIO.stdOut,"Syntax Error: Number of arguments does not match in function "^name^"\n");
                 raise argumentMismatch)
            end
        
        val tupleList = List.map (fn x => "v"^Int.toString(nextIdNum())) patList
     in
       len(L); (* just check the paramter list sizes so all patterns have same length *)
       (name,[match(idpat(hd(tupleList)),
                 List.foldr (fn (x,y) => func(nextIdNum(),[match(idpat(x), y)])) 
                    (apply (func(nextIdNum(),List.map (fn (n,p,e) => match(tuplepat(p),e)) L),tuplecon(List.map (fn x => id(x)) tupleList))) (tl tupleList))])
      
(*     This version worked before adding support for mutually recursive functions. It converts a curried function to a val rec declaration.  
       bindvalrec(idpat(name),List.foldr (fn (x,y) => func(nextIdNum(),[match(idpat(x), y)])) 
                    (apply (func(nextIdNum(),List.map (fn (n,p,e) => match(tuplepat(p),e)) L),tuplecon(List.map (fn x => id(x)) tupleList))) tupleList)
*) 
     end

fun makeMatchList (nil) = raise emptyDecList
  | makeMatchList (L as (name,pat,exp)::t) =
    (name, List.map (fn (n,p,e) => 
               (if name <> n then (
                   TextIO.output(TextIO.stdOut,"Syntax Error: Function definition with different names "^name^" and "^n^" not allowed.\n");
                   raise argumentMismatch)
                else match(p,e))) L)


      
%%
%name mlcomp (* mlcomp becomes a prefix in functions *)
%verbose
%eop EOF
%pos int
%nodefault
%pure (* no side-effects in actions *)

%term EOF
    | LParen
    | RParen
    | Plus
    | Minus
    | Times
    | Div
    | Mod
    | Greater
    | Less
    | GreaterEqual
    | LessEqual
    | NotEqual
    | Append
    | ListCons
    | Comma
    | Semicolon
    | Underscore
    | Arrow
    | Equals
    | VerticalBar
    | LBracket
    | RBracket
    | Fun
    | As
    | Let
    | Val
    | In
    | End
    | If
    | Then
    | Else
    | Fn
    | While
    | Do
    | Handle
    | Raise
    | And
    | Rec
    | String of string
    | Char of string
    | Int of string
    | True
    | False
    | Id of string
    | SetEqual
    | Exclaim
    | Tilde



%nonterm Prog of exp
       | Exp of exp
       | Expressions of exp list
       | ExpSequence of exp list
       | MatchExp of match list
       | Pat of pat
       | Patterns of pat list
       | PatternSeq of pat list
       | Dec of dec
       | ValBind of dec
       | FunBind of (string * match list) list
       | FunMatch of (string * pat * exp) list
       | Con of exp
       | FuncExp of exp
       | DecSeq of dec list
       | CurriedFun of (string * pat list * exp) list

%right SetEqual
%left Plus Minus Append Equals NotEqual
%left Times Div Mod Greater Less GreaterEqual LessEqual 
%right ListCons
%right Exclaim Tilde

%%

(* In the grammar rules below the FuncExp is used much more than in the accompanying 
   textbook. As it turns out, a trailing Exp (e.g. Exp Plus Exp) has a parsing 
   problem when combined with function application. In SML writing 4 + f(2) is 
   permissable, but if `Exp -> Exp Plus Exp` is the rule then this parses as `(4 + f)(2)`
   instead of the correct precedence of `4 + (f 2)`. By changing all trailing Exp
   non-terminals to FuncExp we require the correct precedence of function application
   before these other operations. All other operations (other than function application)
   have tokens associated with them and therefore the correct precedence is established
   by the precedence rules above. *)

Prog : Exp EOF                                             (Exp)                  

Exp : Con                                                  (Con)
    | Id                                                   (id(Id))
    | FuncExp Exp                                          (apply(FuncExp,Exp))
    | Exclaim Exp                                          (apply(id("!"),Exp))
    | Tilde Exp                                            (negate(Exp))
    | Id SetEqual FuncExp                                  (infixexp(":=",id(Id),FuncExp))
    | Exp Plus FuncExp                                     (infixexp("+",Exp,FuncExp))
    | Exp Minus FuncExp                                    (infixexp("-",Exp,FuncExp))
    | Exp Times FuncExp                                    (infixexp("*",Exp,FuncExp))
    | Exp Div FuncExp                                      (infixexp("div",Exp,FuncExp))
    | Exp Mod FuncExp                                      (infixexp("mod",Exp,FuncExp))
    | Exp Greater FuncExp                                  (infixexp(">",Exp,FuncExp))
    | Exp GreaterEqual FuncExp                             (infixexp(">=",Exp,FuncExp))
    | Exp Less FuncExp                                     (infixexp("<",Exp,FuncExp))
    | Exp LessEqual FuncExp                                (infixexp("<=",Exp,FuncExp))
    | Exp Equals FuncExp                                   (infixexp("=",Exp,FuncExp))
    | Exp NotEqual FuncExp                                 (infixexp("<>",Exp,FuncExp))
    | Exp Append FuncExp                                   (infixexp("@",Exp,FuncExp))
    | Exp ListCons FuncExp                                 (infixexp("::",Exp,FuncExp))
    | LParen RParen                                        (tuplecon([]))
    | LParen Exp RParen                                    (Exp)
    | LParen Expressions RParen                            (tuplecon(Expressions))
    | LParen ExpSequence RParen                            (expsequence(ExpSequence))
    | LBracket Expressions RBracket                        (listcon(Expressions))
    | LBracket RBracket                                    (id("nil"))
    | Let DecSeq In ExpSequence End                        
                (List.hd (List.foldr (fn (x,y) => [letdec(x,y)]) ExpSequence DecSeq))
    | Raise FuncExp                                        (raisexp(FuncExp))
    | Exp Handle MatchExp                                  (handlexp(Exp,MatchExp))
    | If Exp Then Exp Else FuncExp                         (ifthen(Exp1,Exp2,FuncExp))
    | While Exp Do FuncExp                                 (whiledo(Exp,FuncExp))

    | Fn MatchExp                                          (func(nextIdNum(),MatchExp))

(* The FuncExp is defined because it forces a reduction in the parser to be performed
   instead of a shift. Because function application (i.e. a function call is defined
   as two expressions juxtaposed as in (Exp1 Exp2) there is some ambiguity if we write
   (Exp1 Exp2 Exp3). We want function Exp1 passing Exp2 into it and the result being 
   applied to Exp3 as in ((Exp1 Exp2) Exp3). To get that left associativity if we 
   define function application as (FuncExp Exp) then when three are written next to 
   each other we must first reduce Exp1 to FuncExp and then the Combination of 
   FuncExp Exp1 reduces to Exp which again reduces to FuncExp to be able to apply
   FuncExp Exp3. This guarantees left-associativity of function application. Likewise,
   FuncExp appears in the other expression grammar rules to insure the correct 
   associativity of operations in those cases. *)

FuncExp : Exp                                              (Exp)

Expressions : Exp                                          ([Exp])
            | Exp Comma Expressions                        (Exp::Expressions)

ExpSequence : Exp                                          ([Exp])
            | Exp Semicolon ExpSequence                    (Exp::ExpSequence)

MatchExp : Pat Arrow Exp                                   ([match(Pat,Exp)])
         | Pat Arrow Exp VerticalBar MatchExp              (match(Pat,Exp)::MatchExp)

Pat : Int                                                  (intpat(Int))
    | Char                                                 (chpat(Char))
    | String                                               (strpat(String))
    | True                                                 (boolpat("true"))
    | False                                                (boolpat("false"))
    | Underscore                                           (wildcardpat)
    | Id                                                   (idpat(Id))
    | Pat ListCons Pat                                     (infixpat("::",Pat1,Pat2))
    | LParen RParen                                        (tuplepat([]))
    | LParen Pat RParen                                    (Pat)
    | LParen Patterns RParen                               (tuplepat(Patterns))
    | LBracket Patterns RBracket                           (listpat(Patterns))
    | LBracket RBracket                                    (idpat("nil"))
    | Id As Pat                                            (aspat(Id,Pat))

Patterns : Pat                                             ([Pat])
         | Pat Comma Patterns                              (Pat::Patterns)

PatternSeq : Pat                                           ([Pat])
           | Pat PatternSeq                                (Pat::PatternSeq)

Dec : Val ValBind                                          (ValBind)
    | Fun FunBind                                          (funmatches(FunBind))

DecSeq : Dec                                               ([Dec])
       | Dec DecSeq                                        (Dec::DecSeq)

ValBind : Pat Equals Exp                                   (bindval(Pat,Exp))
        | Rec Id Equals Exp                                (bindvalrec(idpat(Id),Exp))

FunBind : FunMatch                                         ([makeMatchList FunMatch])
        | CurriedFun                                       ([uncurryIt CurriedFun])
        | FunBind And FunBind                              (FunBind1@FunBind2)

FunMatch : Id Pat Equals Exp                               ([(Id,Pat,Exp)])
         | Id Pat Equals Exp VerticalBar FunMatch          ((Id,Pat,Exp)::FunMatch)

CurriedFun : 
           Id PatternSeq Equals Exp                        ([(Id,PatternSeq,Exp)])
         | Id PatternSeq Equals Exp VerticalBar CurriedFun ((Id,PatternSeq,Exp)::CurriedFun)

Con : Int                                                  (int(Int))
    | Char                                                 (ch(Char))
    | String                                               (str(String))
    | True                                                 (boolval("true"))
    | False                                                (boolval("false"))
    | LParen RParen                                        (tuplecon([]))
